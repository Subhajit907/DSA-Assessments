ðŸ’¡ **Question 1**

Given two strings s1 and s2, return *the lowest **ASCII** sum of deleted characters to make two strings equal*.

**Example 1:**

**Input:** s1 = "sea", s2 = "eat"

**Output:** 231

**Explanation:** Deleting "s" from "sea" adds the ASCII value of "s" (115) to the sum.

Deleting "t" from "eat" adds 116 to the sum.

At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.

Sol:

def minimumDeleteSum(s1, s2):
    m, n = len(s1), len(s2)
    dp = [[0] * (n+1) for _ in range(m+1)]
    
    # Initialize the first row and column
    for i in range(1, m+1):
        dp[i][0] = dp[i-1][0] + ord(s1[i-1])
    for j in range(1, n+1):
        dp[0][j] = dp[0][j-1] + ord(s2[j-1])
    
    # Fill the table using dynamic programming
    for i in range(1, m+1):
        for j in range(1, n+1):
            if s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
            else:
                dp[i][j] = min(dp[i-1][j] + ord(s1[i-1]), dp[i][j-1] + ord(s2[j-1]))
    
    return dp[m][n]



ðŸ’¡ **Question 2**

Given a string s containing only three types of characters: '(', ')' and '*', return true *if* s *is **valid***.

The following rules define a **valid** string:

- Any left parenthesis '(' must have a corresponding right parenthesis ')'.
- Any right parenthesis ')' must have a corresponding left parenthesis '('.
- Left parenthesis '(' must go before the corresponding right parenthesis ')'.
- '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".

**Example 1:**

**Input:** s = "()"

**Output:**

true

Sol:

def checkValidString(s):
    stack = []
    star_stack = []
    
    for char in s:
        if char == '(':
            stack.append(char)
        elif char == '*':
            star_stack.append(char)
        elif char == ')':
            if stack:
                stack.pop()
            elif star_stack:
                star_stack.pop()
            else:
                return False
    
    while stack and star_stack:
        if stack[-1] > star_stack[-1]:
            return False
        stack.pop()
        star_stack.pop()
    
    return len(stack) == 0



ðŸ’¡ **Question 3**

Given two strings word1 and word2, return *the minimum number of **steps** required to make* word1 *and* word2 *the same*.

In one **step**, you can delete exactly one character in either string.

**Example 1:**

**Input:** word1 = "sea", word2 = "eat"

**Output:** 2

**Explanation:** You need one step to make "sea" to "ea" and another step to make "eat" to "ea".

Solu:

def minDistance(word1, word2):
    m, n = len(word1), len(word2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]

    # Base cases
    for i in range(1, m + 1):
        dp[i][0] = i
    for j in range(1, n + 1):
        dp[0][j] = j

    # Fill in the table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1

    return dp[m][n]




ðŸ’¡ **Question 4**

You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.
You always start to construct the **left** child node of the parent first if it exists.

**Input:** s = "4(2(3)(1))(6(5))"

**Output:** [4,2,6,3,1,5]

Solu:

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def buildTree(s):
    if not s:
        return None
    
    # Find the value of the root node
    i = 0
    while i < len(s) and s[i] != '(':
        i += 1
    root_val = int(s[:i])
    
    # Create the root node
    root = TreeNode(root_val)
    
    # Find the substring representing the left child
    left_start = i
    left_end = findClosingParenthesis(s, left_start)
    left_child = s[left_start + 1:left_end]
    
    # Recursively build the left subtree
    root.left = buildTree(left_child)
    
    # Find the substring representing the right child
    right_start = left_end + 1
    right_child = s[right_start + 1:-1]
    
    # Recursively build the right subtree
    root.right = buildTree(right_child)
    
    return root


def findClosingParenthesis(s, start):
    count = 0
    i = start
    while i < len(s):
        if s[i] == '(':
            count += 1
        elif s[i] == ')':
            count -= 1
            if count == 0:
                return i
        i += 1
    
    return -1





ðŸ’¡ **Question 5**

Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of **consecutive repeating characters** in chars:

- If the group's length is 1, append the character to s.
- Otherwise, append the character followed by the group's length.

The compressed string s **should not be returned separately**, but instead, be stored **in the input character array chars**. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done **modifying the input array,** return *the new length of the array*.

You must write an algorithm that uses only constant extra space.

**Example 1:**

**Input:** chars = ["a","a","b","b","c","c","c"]

**Output:** Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

**Explanation:**

The groups are "aa", "bb", and "ccc". This compresses to "a2b2c3".

Solu: 
def compress(chars):
    write = 0  # Pointer to write the compressed characters
    read = 0  # Pointer to traverse the original array
    n = len(chars)
    
    while read < n:
        count = 1  # Count of consecutive repeating characters
        
        # Count the number of consecutive repeating characters
        while read + 1 < n and chars[read] == chars[read + 1]:
            read += 1
            count += 1
        
        # Write the compressed character(s) at the write pointer position
        chars[write] = chars[read]
        write += 1
        
        if count > 1:
            # Convert count to string and write the characters
            count_str = str(count)
            chars[write:write + len(count_str)] = count_str
            write += len(count_str)
        
        # Move the read pointer to the next character
        read += 1
    
    return write



ðŸ’¡ **Question 6**

Given two strings s and p, return *an array of all the start indices of* p*'s anagrams in* s. You may return the answer in **any order**.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

**Example 1:**

**Input:** s = "cbaebabacd", p = "abc"

**Output:** [0,6]

**Explanation:**

The substring with start index = 0 is "cba", which is an anagram of "abc".

The substring with start index = 6 is "bac", which is an anagram of "abc".

Solu:
from collections import defaultdict

def findAnagrams(s, p):
    result = []
    p_freq = defaultdict(int)
    window_freq = defaultdict(int)

    # Count the frequency of characters in p
    for char in p:
        p_freq[char] += 1

    left = 0
    right = 0
    window_size = len(p)
    s_len = len(s)

    while right < s_len:
        # Expand the window
        window_freq[s[right]] += 1

        # Shrink the window if its size exceeds p's length
        if right - left + 1 > window_size:
            window_freq[s[left]] -= 1
            if window_freq[s[left]] == 0:
                del window_freq[s[left]]
            left += 1

        # Check if the window is an anagram of p
        if window_freq == p_freq:
            result.append(left)

        right += 1

    return result



ðŸ’¡ **Question 7**

Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

**Example 1:**

**Input:** s = "3[a]2[bc]"

**Output:** "aaabcbc"

Solu:

def decodeString(s):
    stack = []
    curr_num = 0
    curr_str = ""

    for char in s:
        if char.isdigit():
            curr_num = curr_num * 10 + int(char)
        elif char == '[':
            stack.append(curr_num)
            stack.append(curr_str)
            curr_num = 0
            curr_str = ""
        elif char == ']':
            prev_str = stack.pop()
            prev_num = stack.pop()
            curr_str = prev_str + curr_str * prev_num
        else:
            curr_str += char

    return curr_str



ðŸ’¡ **Question 8**

Given two strings s and goal, return true *if you can swap two letters in* s *so the result is equal to* goal*, otherwise, return* false*.*

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

- For example, swapping at indices 0 and 2 in "abcd" results in "cbad".

**Example 1:**

**Input:** s = "ab", goal = "ba"

**Output:** true

**Explanation:** You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.


Solu:

def buddyStrings(s, goal):
    if len(s) != len(goal):
        return False

    if s == goal:
        # Check if there are any repeated characters in s.
        seen = set()
        for char in s:
            if char in seen:
                return True
            seen.add(char)
        return False

    pairs = []
    for i in range(len(s)):
        if s[i] != goal[i]:
            pairs.append((s[i], goal[i]))

    return len(pairs) == 2 and pairs[0] == pairs[1][::-1]






