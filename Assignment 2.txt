ðŸ’¡ **Question 1**
Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2),..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

**Example 1:**
Input: nums = [1,4,3,2]
Output: 4

**Explanation:** All possible pairings (ignoring the ordering of elements) are:

1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4

Solu:

def arrayPairSum(nums):
    nums.sort()  # Sort the array in ascending order
    max_sum = 0
    
    # Iterate through the sorted array and add min(ai, bi) to the sum
    for i in range(0, len(nums), 2):
        max_sum += nums[i]
        
    return max_sum

# Test the function with the example input
nums = [1, 4, 3, 2]
result = arrayPairSum(nums)
print(result)  # Output: 4



ðŸ’¡ **Question 2**
Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor. 

The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. 

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.

**Example 1:**
Input: candyType = [1,1,2,2,3,3]
Output: 3

**Explanation**: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.

Solu:

def distributeCandies(candyType):
    max_candies = len(candyType) // 2
    unique_candies = len(set(candyType))
    
    return min(unique_candies, max_candies)

# Test the function with the example input
candyType = [1, 1, 2, 2, 3, 3]
result = distributeCandies(candyType)
print(result)  # Output: 3



ðŸ’¡ **Question 3**
We define a harmonious array as an array where the difference between its maximum value
and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence
among all its possible subsequences.

A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

**Example 1:**
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5

**Explanation:** The longest harmonious subsequence is [3,2,2,2,3].

Solu:

def findLHS(nums):
    num_count = {}
    
    # Count the frequency of each number in nums
    for num in nums:
        num_count[num] = num_count.get(num, 0) + 1
    
    max_length = 0
    
    # Check each number and its adjacent numbers in num_count
    for num in num_count:
        if num + 1 in num_count:
            length = num_count[num] + num_count[num + 1]
            max_length = max(max_length, length)
    
    return max_length

# Test the function with the example input
nums = [1, 3, 2, 2, 5, 2, 3, 7]
result = findLHS(nums)
print(result)  # Output: 5


